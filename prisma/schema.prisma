// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?   @unique
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  
  // Staff system
  role          String    @default("user") // user, moderator, admin
  isBanned      Boolean   @default(false)
  bannedAt      DateTime?
  bannedBy      String?
  banReason     String?
  
  // Stripe integration
  stripeAccountId String?
  stripeCustomerId String?
  
  // Payment details for pledgers
  hasPaymentMethod     Boolean @default(false)
  cardLast4            String?
  cardBrand            String?
  cardExpMonth         Int?
  cardExpYear          Int?
  stripePaymentMethodId String?
  
  // Deposit details for server owners
  hasDepositMethod Boolean @default(false)
  bankAccountLast4 String?
  bankRoutingLast4 String?
  bankName         String?
  
  // Payment failure tracking
  paymentFailureCount Int      @default(0)
  lastPaymentFailure  DateTime?
  isPaymentSuspended  Boolean  @default(false)
  paymentSuspendedAt  DateTime?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  servers  Server[]
  pledges  Pledge[]
  activities ActivityLog[]
  favorites Favorite[]
  serverBoosts ServerBoost[]
  ticketsCreated Ticket[] @relation("TicketCreator")
  ticketsAssigned Ticket[] @relation("TicketAssignee")
  banActions BanAction[]
  ticketMessages TicketMessage[]
  userBanTargets BanAction[] @relation("UserBanTarget")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Server {
  id          String   @id @default(cuid())
  name        String
  description String?
  cost        Float
  targetPledges Int    @default(0)
  currentPledges Int   @default(0)
  isActive    Boolean  @default(true)
  withdrawalDay Int    @default(1) // Day of month (1-31) when server owner needs payment
  gameType    String   @default("minecraft") // minecraft, cs2, csgo, ark, rust, etc.
  region      String   @default("US-East") // Server region for latency optimization
  tags        String   @default("") // Comma-separated tags for filtering
  bannerUrl   String?  // URL for GIF banner
  serverIp    String?  // Server IP address
  serverPort  Int?     // Server port number
  discordChannel String? // Discord channel link
  discordWebhook String? // Discord webhook URL for pledge notifications
  
  // Staff system
  isBanned    Boolean  @default(false)
  bannedAt    DateTime?
  bannedBy    String?
  banReason   String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  pledges     Pledge[]
  withdrawals Withdrawal[]
  activities  ActivityLog[]
  favorites   Favorite[]
  serverBoosts ServerBoost[]
  banActions  BanAction[]
}

model Pledge {
  id        String   @id @default(cuid())
  amount    Float
  status    String   @default("pending") // pending, completed, failed, cancelled
  createdAt DateTime @default(now())
  
  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  serverId String
  server   Server   @relation(fields: [serverId], references: [id], onDelete: Cascade)
  
  @@unique([userId, serverId])
}

model Withdrawal {
  id          String   @id @default(cuid())
  amount      Float
  status      String   @default("pending") // pending, completed, failed
  scheduledDate DateTime // When the withdrawal should be processed
  processedAt DateTime?
  createdAt   DateTime @default(now())
  
  serverId    String
  server      Server   @relation(fields: [serverId], references: [id], onDelete: Cascade)
  
  @@unique([serverId, scheduledDate])
}

model ActivityLog {
  id        String   @id @default(cuid())
  type      String   // pledge, unpledge, server_created, server_pledge
  message   String
  amount    Float?
  createdAt DateTime @default(now())
  
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  serverId  String?
  server    Server?  @relation(fields: [serverId], references: [id], onDelete: Cascade)
}

model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  serverId  String
  server    Server   @relation(fields: [serverId], references: [id], onDelete: Cascade)
  
  @@unique([userId, serverId])
}

model ServerBoost {
  id          String   @id @default(cuid())
  amount      Float    @default(3.0) // $3 boost cost
  expiresAt   DateTime // 24 hours from creation
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  
  serverId    String
  server      Server   @relation(fields: [serverId], references: [id], onDelete: Cascade)
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model Ticket {
  id          String   @id @default(cuid())
  title       String
  description String
  status      String   @default("open") // open, in_progress, resolved, closed
  priority    String   @default("medium") // low, medium, high, urgent
  category    String   // bug, feature, support, report, other
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  resolvedAt  DateTime?
  
  createdById String
  createdBy   User     @relation("TicketCreator", fields: [createdById], references: [id], onDelete: Cascade)
  assignedToId String?
  assignedTo  User?    @relation("TicketAssignee", fields: [assignedToId], references: [id], onDelete: SetNull)
  
  messages    TicketMessage[]
}

model TicketMessage {
  id        String   @id @default(cuid())
  content   String
  isStaff   Boolean  @default(false) // true if message is from staff
  createdAt DateTime @default(now())
  
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model BanAction {
  id          String   @id @default(cuid())
  action      String   // ban_user, unban_user, ban_server, unban_server
  reason      String
  createdAt   DateTime @default(now())
  
  staffId     String
  staff       User     @relation(fields: [staffId], references: [id], onDelete: Cascade)
  targetUserId String?
  targetUser  User?    @relation("UserBanTarget", fields: [targetUserId], references: [id], onDelete: Cascade)
  targetServerId String?
  targetServer Server? @relation(fields: [targetServerId], references: [id], onDelete: Cascade)
}

model PlatformBanking {
  id                String   @id @default(cuid())
  bankName          String
  accountNumber     String
  routingNumber     String
  accountHolderName String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}
